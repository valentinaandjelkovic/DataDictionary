package DataDictionaryDsl.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_AbstractDomen;
  private ConceptPresentation props_Aggregation;
  private ConceptPresentation props_Boolean;
  private ConceptPresentation props_Constraint;
  private ConceptPresentation props_DataDictionary;
  private ConceptPresentation props_Date;
  private ConceptPresentation props_Double;
  private ConceptPresentation props_Exclusive;
  private ConceptPresentation props_Field;
  private ConceptPresentation props_FieldDefinition;
  private ConceptPresentation props_IAbstractElement;
  private ConceptPresentation props_IAbstractStructure;
  private ConceptPresentation props_ISpecialization;
  private ConceptPresentation props_Integer;
  private ConceptPresentation props_NonExclusive;
  private ConceptPresentation props_PredefinedDomen;
  private ConceptPresentation props_SemanticDomen;
  private ConceptPresentation props_SemanticDomenDefinition;
  private ConceptPresentation props_Set;
  private ConceptPresentation props_StructureDefinition;
  private ConceptPresentation props_Text;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AbstractDomen:
        if (props_AbstractDomen == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_AbstractDomen = cpb.create();
        }
        return props_AbstractDomen;
      case LanguageConceptSwitch.Aggregation:
        if (props_Aggregation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Aggregation");
          props_Aggregation = cpb.create();
        }
        return props_Aggregation;
      case LanguageConceptSwitch.Boolean:
        if (props_Boolean == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("\"true/false\"");
          cpb.rawPresentation("boolean");
          props_Boolean = cpb.create();
        }
        return props_Boolean;
      case LanguageConceptSwitch.Constraint:
        if (props_Constraint == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Constraint");
          props_Constraint = cpb.create();
        }
        return props_Constraint;
      case LanguageConceptSwitch.DataDictionary:
        if (props_DataDictionary == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_DataDictionary = cpb.create();
        }
        return props_DataDictionary;
      case LanguageConceptSwitch.Date:
        if (props_Date == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Date");
          props_Date = cpb.create();
        }
        return props_Date;
      case LanguageConceptSwitch.Double:
        if (props_Double == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Double");
          props_Double = cpb.create();
        }
        return props_Double;
      case LanguageConceptSwitch.Exclusive:
        if (props_Exclusive == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Exclusive");
          props_Exclusive = cpb.create();
        }
        return props_Exclusive;
      case LanguageConceptSwitch.Field:
        if (props_Field == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Field = cpb.create();
        }
        return props_Field;
      case LanguageConceptSwitch.FieldDefinition:
        if (props_FieldDefinition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x16d63821a9174aafL, 0xa85f305cd4a0013fL, 0x160766bd4338602aL, 0x160766bd4338602bL, "field", "", "");
          props_FieldDefinition = cpb.create();
        }
        return props_FieldDefinition;
      case LanguageConceptSwitch.IAbstractElement:
        if (props_IAbstractElement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IAbstractElement = cpb.create();
        }
        return props_IAbstractElement;
      case LanguageConceptSwitch.IAbstractStructure:
        if (props_IAbstractStructure == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IAbstractStructure = cpb.create();
        }
        return props_IAbstractStructure;
      case LanguageConceptSwitch.ISpecialization:
        if (props_ISpecialization == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ISpecialization = cpb.create();
        }
        return props_ISpecialization;
      case LanguageConceptSwitch.Integer:
        if (props_Integer == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Integer");
          props_Integer = cpb.create();
        }
        return props_Integer;
      case LanguageConceptSwitch.NonExclusive:
        if (props_NonExclusive == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("NonExclusive");
          props_NonExclusive = cpb.create();
        }
        return props_NonExclusive;
      case LanguageConceptSwitch.PredefinedDomen:
        if (props_PredefinedDomen == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_PredefinedDomen = cpb.create();
        }
        return props_PredefinedDomen;
      case LanguageConceptSwitch.SemanticDomen:
        if (props_SemanticDomen == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x16d63821a9174aafL, 0xa85f305cd4a0013fL, 0x160766bd43386032L, 0x3ca44af6d3197fa2L, "refSemanticDefinition", "", "");
          props_SemanticDomen = cpb.create();
        }
        return props_SemanticDomen;
      case LanguageConceptSwitch.SemanticDomenDefinition:
        if (props_SemanticDomenDefinition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_SemanticDomenDefinition = cpb.create();
        }
        return props_SemanticDomenDefinition;
      case LanguageConceptSwitch.Set:
        if (props_Set == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Set");
          props_Set = cpb.create();
        }
        return props_Set;
      case LanguageConceptSwitch.StructureDefinition:
        if (props_StructureDefinition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_StructureDefinition = cpb.create();
        }
        return props_StructureDefinition;
      case LanguageConceptSwitch.Text:
        if (props_Text == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Text");
          props_Text = cpb.create();
        }
        return props_Text;
    }
    return null;
  }
}
